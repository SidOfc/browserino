{
  "name": "Browserino",
  "tagline": "A ruby browser (dare I say) sniffer",
  "body": "# Browserino\r\n\r\nA UserAgent sniffer with Rails >= 3.2.0 integration.\r\nThe sniffer can currently identify 22 bots (of which 6 social media and 5 search engines), 14 browsers, 9 operating systems, 6 programming language UA's and 4 consoles.\r\n\r\n## Status\r\n\r\n[![Gem Version](https://badge.fury.io/rb/browserino.svg)](http://badge.fury.io/rb/browserino)\r\n[![Build Status](https://travis-ci.org/SidOfc/browserino.svg?branch=master)](https://travis-ci.org/SidOfc/browserino)\r\n[![Coverage Status](https://coveralls.io/repos/SidOfc/browserino/badge.svg?branch=master&service=github)](https://coveralls.io/github/SidOfc/browserino?branch=master)\r\n\r\n---\r\n\r\nUseragent references:\r\n\r\n* http://useragentstring.com/\r\n* http://www.zytrax.com/tech/web/mobile_ids.html\r\n* http://www.user-agents.org/\r\n\r\n## Changelog\r\n\r\n_dates are in dd-mm-yyyy format_  \r\n_older changes can be found in the [CHANGELOG.md](/CHANGELOG.md)_\r\n\r\n#### 19-10-2016 VERSION 2.10.1.1\r\n\r\n- Test on ruby 2.3.1\r\n- Fix missing questionmarks on method names in the README.\r\n- Change gem homepage to io domain\r\n\r\n#### 25-08-2016 VERSION 2.10.1\r\n\r\n- Replaced `require` with `require_relative` where possible\r\n- Fixed cli not loading due to failing `require`\r\n\r\n#### 24-07-2016 VERSION 2.10.0\r\n\r\n- Added support for the servo browser:\r\n  - Added `servo?` method\r\n\r\n- Added detection for various programming languages:\r\n  - Added `library?` method\r\n  - Added `php?` method\r\n  - Added `perl?` method\r\n  - Added `python?` method\r\n  - Added `java?` method\r\n  - Added `curl?` method\r\n  - Added `pycurl?` method\r\n\r\n## Installation\r\n\r\nAdd the following to your applications Gemfile:\r\n\r\n```ruby\r\ngem 'browserino'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```\r\n$ bundle\r\n```\r\n\r\nOr install it yourself with:\r\n\r\n```\r\n$ gem install browserino\r\n```\r\n\r\nBrowserino is tested with the following ruby versions\r\n\r\n* 1.9.3\r\n* 2.0.0\r\n* 2.1.0\r\n* 2.2.1\r\n* 2.3.0\r\n* 2.3.1\r\n\r\n## Usage\r\n\r\nAfter installing the gem globally or in your application you'll have to `require` the gem before being able to use it.\r\n\r\n```ruby\r\nrequire 'browserino'\r\n```\r\nAfterwards, the gem is loaded and you can proceed by calling:\r\n\r\n```ruby\r\nBrowserino.parse '<user agent>'\r\n```\r\n\r\nBrowserino is also usable in the command line\r\n\r\n```\r\n~$ browserino parse <ua>\r\n```\r\n\r\nOutput\r\n```\r\nname: chrome, browser_version: 50.0.2661.102, engine_name: webkit, engine_version: 537.36, system_name: macintosh, system_architecture: nil\r\n```\r\n\r\n### Rails (>= 3.2.0)\r\n\r\nIf you're using Rails (>= 3.2.0) you'll have access to an `agent` object. Browserino will initialize itself using the `request.headers['User-Agent']`\r\n\r\n\r\nA quick example on how to get going:\r\n```ruby\r\nclass ApplicationController < ActionController::Base\r\n  def some_method\r\n    render json: agent\r\n  end\r\nend\r\n```\r\n\r\n### General\r\n\r\nthe `parse` method will **always** return a `Browserino::Agent` object.\r\n\r\n```ruby\r\nBrowserino.parse '<user agent>' # => #<Browserino::Agent:0x007f9b09b1fae8 ... >\r\n```\r\n\r\n### Default return values\r\n\r\nIf a property isn't available or not known to Browserino it's return value will always be `nil`, this can be tested by supplying an empty string (`''`) to `parse`:\r\n\r\n```ruby\r\nagent = Browserino.parse ''\r\nagent.name\r\n# => nil\r\n```\r\n\r\nIf a value *is* found then you'll recieve a *lowercase string* containing the information:\r\n\r\n```ruby\r\nagent = Browserino.parse 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/537.36 (KHTML, like Gecko) brave/0.7.7 Chrome/47.0.2526.73 Electron/0.36.2 Safari/537.36'\r\n\r\nagent.name\r\n# => 'brave'\r\n\r\n# or using browser_name\r\n\r\nagent.browser_name\r\n# => 'brave'\r\n\r\nagent.browser_version\r\n# => '0.7.7'\r\n\r\nagent.engine_name\r\n# => 'webkit'\r\n```\r\n\r\nBrowserino also has some question methods, these will always return either `true` or `false`. The exceptions to this rule are methods that can take a name, for instance the `bot?` method:\r\n\r\n```ruby\r\nagent = Browserino.parse ''\r\nagent.bot?\r\n# => true (empty UA's count as anonymous bots)\r\n\r\nagent.googlebot?\r\n# => false\r\n\r\nagent.non_supported_bot?\r\n# => NoMethodError\r\n\r\nagent.bot? :non_supported_bot\r\n# => NoMethodError\r\n```\r\n\r\n### Functions\r\n\r\nThe samples below are all valid calls with their respective outputs, using the `agent` defined below.\r\n\r\n```ruby\r\nagent = Browserino.parse 'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko'\r\n```\r\n\r\n#### Note\r\n\r\nThe methods `social_media_name`, `search_engine_name`, `bot_name` and `browser_name`\r\nare *all* aliasses of the general `name` method.\r\n\r\nThe exceptions to this rule are `system_name` and `console_name`. They each have their own method.\r\n\r\n##### Quick usage\r\n\r\n```ruby\r\nagent.name\r\n# => 'ie'\r\n\r\n# always returns real version, also when IE is in compat\r\nagent.browser_version\r\n# => '11.0'\r\n\r\n# to get the compat version that IE is running in\r\n# returns real version if not in compat mode\r\nagent.browser_version compat: true\r\n# => '11.0'\r\n\r\nagent.library_name\r\n# => nil\r\n\r\nagent.library_version\r\n# => nil\r\n\r\nagent.engine_name\r\n# => 'trident'\r\n\r\nagent.engine_version\r\n# => '7.0'\r\n\r\nagent.system_name\r\n# => 'windows'\r\n\r\n# system_name attempts to find the operating systems version name\r\n# when full: true is used\r\n# returning an array with either the version name or nil if not found\r\nagent.system_name full: true\r\n# => ['windows', '7']\r\n\r\nagent.system_version\r\n# => '6.1'\r\n\r\nagent.system_architecture\r\n# => 'x64'\r\n\r\nagent.console_name\r\n# => nil\r\n\r\n# two formats possible: 'aa' or `aa-bb`\r\nagent.locale\r\n# => 'as'\r\n```\r\n\r\n##### Question methods\r\n\r\nBrowserino also provides some question methods.\r\n\r\n```ruby\r\n# only for Internet Explorer\r\nagent.compat?\r\n# => false\r\n\r\n# returns true if name is present\r\nagent.known?\r\n# => true\r\n\r\n# returns true if browser is known\r\nagent.browser?\r\n# => true\r\n\r\n# returns true if specific browser\r\nagent.browser? :ie\r\n# => true\r\n\r\n# returns true if specific browser and version\r\nagent.browser? :ie, version: '11.0'\r\n\r\n# returns true if library is known\r\nagent.library?\r\n\r\n# returns true if specific library\r\nagent.library? :php\r\n\r\n# returns true if specific library and version\r\nagent.library? :php, version: '5.9.0'\r\n\r\n# returns true if there is a social media bot on your website\r\nagent.social_media?\r\n# => false\r\n\r\n# returns true if platform is known\r\nagent.platform?\r\n# => true\r\n\r\n# returns true if specific platform\r\nagent.platform? :windows\r\n# => true\r\n\r\n# returns true if specific platform and version\r\nagent.platform? :windows, version: '7'\r\n# => true\r\n\r\n# returns true if console is known\r\nagent.console?\r\n# => false\r\n\r\n# returns true if specific console\r\nagent.console? :xbox\r\n# => false\r\n\r\n# returns true if user agent is empty or a bot is recognized\r\nagent.bot?\r\n# => false\r\n\r\nagent.x64?\r\n# => true\r\n\r\nagent.x32?\r\n# => false\r\n\r\nagent.mobile?\r\n# => false\r\n```\r\n\r\nThe above methods are the base questions you can ask but there are a lot more methods you can call on the `agent`. Every supported browser, operating system or bot is basically a question method so you could do this:\r\n\r\n```ruby\r\nagent.windows?\r\n# => true\r\n\r\n# based on full name\r\nagent.windows? '7'\r\n# => true\r\n\r\n# NT versions also work\r\nagent.windows? 6.1\r\n# => true\r\n```\r\n\r\n##### Transformation\r\n\r\nBrowserino implements `to_a`, `to_h` and `to_s` to allow for collected data to be moved around without attaching the entire object with methods.\r\n\r\n**to_s**\r\n\r\nReturns a compiled string of properties based on available information.\r\n\r\n```ruby\r\nagent.to_s\r\n# => 'ie ie11 trident trident7 windows x64'\r\n\r\n# a seperator can be passed to format the name + version combo's\r\nagent.to_s '-'\r\n# => 'ie ie-11 trident trident-7 windows x64'\r\n```\r\n\r\nIf the agent object can't find a property in the user agent, that property will be excluded from the string.\r\nFor instance, if the `browser_version` and `engine_version` of the `agent` object are `nil` then the following will be returned:\r\n\r\n```ruby\r\nagent.to_s\r\n# => ie trident windows x64\r\n```\r\n\r\n**to_a**\r\n\r\nReturns an array with key => value pairs.\r\n\r\n```ruby\r\nagent.to_a\r\n# => [[:name, \"ie\"],\r\n#     [:browser_version, \"11.0\"],\r\n#     [:engine_name, \"trident\"],\r\n#     [:engine_version, \"7.0\"],\r\n#     [:system_name, \"windows\"],\r\n#     [:system_version, \"6.1\"],\r\n#     [:system_architecture, \"x64\"],\r\n#     [:console_name, nil],\r\n#     [:locale, \"as\"]]\r\n```\r\n\r\n**to_h**\r\n\r\nReturns a hash with key => value pairs.\r\n\r\n```ruby\r\nagent.to_h\r\n# => {:name=>\"ie\",\r\n#     :browser_version=>\"11.0\",\r\n#     :engine_name=>\"trident\",\r\n#     :engine_version=>\"7.0\",\r\n#     :system_name=>\"windows\",\r\n#     :system_version=>\"6.1\",\r\n#     :system_architecture=>\"x64\",\r\n#     :console_name => nil,\r\n#     :locale=>\"as\"}\r\n```\r\n\r\n##### Supplying versions\r\n\r\nConsider this parsed string:\r\n\r\n```ruby\r\nagent = Browserino.parse 'Mozilla/5.0 (Linux; U; Android 4.1.2; en-us; SM-T210R Build/JZO54K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30 UCBrowser/2.3.2.300'\r\n\r\n# output for system_name\r\nagent.system_name\r\n# => 'android'\r\n\r\n# output for system_name full: true\r\nagent.system_name full: true\r\n# => ['android', 'Jelly Bean 16']\r\n```\r\n\r\nWhen supplying a version to a method that supports it, you have multiple options for the format of that version.\r\n\r\n* Using a symbol or string without version: `:jelly_bean` or `'jelly_bean'`\r\n* Using a symbol or string with version: `:jelly_bean_16` or `'jelly_bean_16'`\r\n* Using a string: `'4.1.2'`  \r\n* Using a float: `4.1`\r\n* Using an int: `4`\r\n\r\nWhen calling the `platform?` or `android?` functions with the above examples, they would all match since the method that compares versions also checks how specific the version is that you want to compare against.\r\n\r\nIf you pass in `4.1` as a version the matcher will look for `x.x` in the extracted version and discard the unspecified value, this allows for you to be explicitly less specific to allow for a greater range of systems to be matched.\r\n\r\n* `4.1.2` will match `4.1.2`\r\n* `4.1` will match `4.1.x`\r\n* `4` will match `4.x.x`\r\n\r\n**Examples using `platform?`**\r\n\r\n```ruby\r\nagent.platform? :android, version: '4.1.2'\r\n# => true\r\n\r\nagent.platform? :android, version: 4.1\r\n# => true\r\n\r\nagent.platform? :android, version: 4\r\n# => true\r\n\r\nagent.platform? :android, version: :jelly_bean\r\n# => true\r\n\r\nagent.platform? :android, version: :jelly_bean_16\r\n# => true\r\n```\r\n\r\n##### `platform?`, `browser?`, `bot?`, `console?`, `search_engine?`, `library` and `social_media?` methods\r\n\r\nAs you've seen above, the `platform?` function can take two arguments, a symbol with the system name and optionally a hash with a `:version` key to supply a version, the `browser?` and `library?` method works in exactly the same way.\r\n\r\nThe `bot?` and `social_media?` methods however aren't that complex since you don't need to know a bot / social media version or anything other than it's name so inside these methods, only a name can be passed:\r\n\r\n*Every social media match is automatically a bot, but a bot isn't automatically social media, __This is also true for the `search_engine?` method__*\r\n\r\n```ruby\r\n# when a bot UA gets parsed\r\nagent = Browserino.parse 'facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)'\r\n\r\nagent.bot?\r\n# => true\r\n\r\nagent.social_media?\r\n# => true\r\n\r\nagent.bot? :facebook\r\n# => true\r\n\r\nagent.social_media? :facebook\r\n# => true\r\n\r\nagent.bot? :facebook, version: 1.1\r\n# => ArgumentError\r\n```\r\n\r\n##### Checking a specific browser, system, bot, library or social media\r\n\r\nEvery name you see in the below lists can be passed as symbol or string to their respective method\r\n\r\n**search engine**\r\n* `google`\r\n* `bing`\r\n* `yahoo_slurp`\r\n* `baiduspider`\r\n* `duckduckgo` or `ddg`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.google?\r\nagent.baiduspider?\r\n\r\n# using the search_engine? method\r\nagent.search_engine? :google\r\n\r\n# using shorthand\r\nagent.search_engine? :ddg\r\n```\r\n\r\n**consoles**\r\n\r\n* `xbox`\r\n* `nintendo_ds`\r\n* `wii`\r\n* `playstation`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.playstation?\r\nagent.wii?\r\n\r\nagent.console?\r\n\r\nagent.console? :facebook\r\n```\r\n\r\n**social media**\r\n\r\n* `facebook` or `fb`\r\n* `twitter`\r\n* `linkedin`\r\n* `instagram`\r\n* `pinterest`\r\n* `tumblr`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.facebook?\r\nagent.tumblr?\r\n\r\n# using the social_media? method\r\nagent.social_media? :facebook\r\n\r\n# using shorthand\r\nagent.social_media? :fb\r\n\r\nagent.social_media? :tumblr\r\n```\r\n\r\n**bot**\r\n\r\n* `google`\r\n* `msn`\r\n* `bing`\r\n* `yahoo_slurp`\r\n* `baiduspider`\r\n* `yandex`\r\n* `sosospider`\r\n* `exa`\r\n* `sogou_spider`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.google?\r\nagent.exa?\r\n\r\n# using the bot? method\r\nagent.bot? :google\r\nagent.bot? :exa\r\n```\r\n\r\n**library**\r\n\r\n* `php`\r\n* `perl`\r\n* `curl`\r\n* `python`\r\n* `java`\r\n* `pycurl`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.php?\r\nagent.pycurl?\r\n\r\nagent.library?\r\n\r\nagent.library? :curl\r\n\r\nagent.library? :curl, version: 7.21\r\n```\r\n\r\n**browser**\r\n\r\n* `chrome`\r\n* `firefox` or `ff`\r\n* `servo`\r\n* `seamonkey`\r\n* `opera`\r\n* `opera_mini`\r\n* `vivaldi`\r\n* `ucbrowser`\r\n* `maxthon`\r\n* `bolt`\r\n* `brave`\r\n* `safari`\r\n* `ie`\r\n* `edge`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.firefox?\r\nagent.chrome? 42\r\n\r\n# using the browser? method\r\nagent.browser? :firefox\r\n\r\n# using shorthand\r\nagent.browser? :ff\r\n\r\nagent.browser? :chrome, version: 42\r\n```\r\n\r\n**operating system**\r\n\r\n* `windows` or `win`\r\n* `macintosh` or `osx`\r\n* `linux`\r\n* `bsd`\r\n* `solaris`\r\n* `android`\r\n* `ios`\r\n* `blackberry` or `bb`\r\n* `windows_phone`\r\n\r\nExamples:\r\n\r\n```ruby\r\nagent.macintosh?\r\nagent.windows_phone? 7\r\n\r\n# to check for windows vista one could do\r\nagent.windows? 6\r\n\r\n# a more readable equivelant\r\nagent.windows? :vista\r\n\r\n# using the platform? method\r\nagent.platform? :macintosh\r\n\r\n# using shorthand\r\nagent.platform? :osx\r\n\r\nagent.platform? :windows_phone, version: 7\r\n```\r\n\r\nNotes:\r\n\r\n* `linux?` doesn't support any versions\r\n* `bsd?` doesn't support any versions\r\n* `solaris?` only supports numeric versions\r\n* *named versions* are only supported if they are present in a [map](/lib/browserino/maps)\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at https://github.com/SidOfc/browserino. This project is intended to be a safe, welcoming space for collaboration, and contributors are expected to adhere to the [Contributor Covenant](contributor-covenant.org) code of conduct.\r\n\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}